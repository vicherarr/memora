using Microsoft.OpenApi.Models;
using System.Reflection;
using Microsoft.Extensions.Options;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace Configuration.Extensions;

public static class SwaggerExtensions
{
    public static IServiceCollection AddSwaggerConfiguration(this IServiceCollection services)
    {
        services.AddSwaggerGen(options =>
        {
            options.SwaggerDoc("v1", new OpenApiInfo
            {
                Title = "üì± Memora API",
                Version = "v1.0",
                Description = @"**API RESTful para la aplicaci√≥n m√≥vil Memora**

**üéØ Caracter√≠sticas principales:**
- üë§ Autenticaci√≥n JWT segura
- üìù Gesti√≥n completa de notas personales
- üìé Archivos adjuntos (im√°genes y videos)
- üîç B√∫squeda por contenido
- üìä Paginaci√≥n eficiente
- üõ°Ô∏è Validaci√≥n exhaustiva

**üîß Tecnolog√≠as:**
- ASP.NET Core 8.0
- Entity Framework Core
- JWT Authentication
- MediatR + CQRS
- FluentValidation

**üìñ Gu√≠a r√°pida:**
1. Reg√≠strate o inicia sesi√≥n en `/api/autenticacion`
2. Usa el token JWT en el bot√≥n üîê Authorize
3. Explora los endpoints de notas y archivos

**‚ö†Ô∏è Importante:** Todos los endpoints (excepto autenticaci√≥n) requieren token JWT v√°lido.",
                Contact = new OpenApiContact
                {
                    Name = "Equipo Memora",
                    Email = "dev@memora.com",
                    Url = new Uri("https://github.com/memora/memora-api")
                },
                License = new OpenApiLicense
                {
                    Name = "MIT License",
                    Url = new Uri("https://opensource.org/licenses/MIT")
                }
            });

            // Include XML comments for comprehensive documentation
            var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
            var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
            if (File.Exists(xmlPath))
            {
                options.IncludeXmlComments(xmlPath, includeControllerXmlComments: true);
            }

            // Add custom schema filters for better examples
            options.SchemaFilter<ExampleSchemaFilter>();
            options.OperationFilter<AuthResponseExamplesFilter>();
            options.OperationFilter<FileUploadOperationFilter>();
            
            // Custom ordering of endpoints
            options.OrderActionsBy(apiDesc => $"{apiDesc.ActionDescriptor.RouteValues["controller"]}_{apiDesc.HttpMethod}");

            // Configure OAuth2 Password Flow for seamless authentication
            options.AddSecurityDefinition("OAuth2", new OpenApiSecurityScheme
            {
                Type = SecuritySchemeType.OAuth2,
                Flows = new OpenApiOAuthFlows
                {
                    Password = new OpenApiOAuthFlow
                    {
                        TokenUrl = new Uri("/api/autenticacion/swagger-auth", UriKind.Relative),
                        Scopes = new Dictionary<string, string>
                        {
                            {"api", "Acceso completo a la API Memora"}
                        }
                    }
                },
                Description = @"üîê **Autenticaci√≥n OAuth2 Password Flow**

**üìã GU√çA PASO A PASO:**

**1Ô∏è‚É£ Preparaci√≥n:**
- Si no tienes cuenta: Usa `/api/autenticacion/registrar` primero
- Si ya tienes cuenta: Contin√∫a al paso 2

**2Ô∏è‚É£ Autenticaci√≥n r√°pida:**
- Haz clic en el bot√≥n **üîê Authorize** arriba
- **Username:** Tu email (ej: `usuario@email.com`)
- **Password:** Tu contrase√±a
- **Client ID/Secret:** D√©jalos VAC√çOS
- Marca ‚úÖ `api` scope
- Clic en **Authorize**

**3Ô∏è‚É£ Verificaci√≥n:**
- ‚úÖ √âxito: El candado se cierra autom√°ticamente
- ‚ùå Error: Revisa credenciales y vuelve a intentar

**üë• Usuarios de prueba disponibles:**
```
üìß Email: test@test.com
üîë Password: Test123456

üìß Email: dockertest@test.com  
üîë Password: Test123456
```

**‚è∞ Token v√°lido por:** 1 hora"
            });
            
            // Alternative Bearer token authentication for manual token input
            options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
            {
                Type = SecuritySchemeType.Http,
                Scheme = "bearer",
                BearerFormat = "JWT",
                In = ParameterLocation.Header,
                Description = @"üé´ **Autenticaci√≥n manual con token JWT**

**üìù Si ya tienes un token JWT:**
1. Obt√©n tu token desde `/api/autenticacion/login`
2. Copia el valor del campo `token`
3. P√©galo aqu√≠ (sin agregar 'Bearer ')
4. Haz clic en Authorize

**‚ö†Ô∏è Nota:** Es m√°s f√°cil usar la opci√≥n OAuth2 de arriba."
            });

            // Security requirements with multiple options
            options.AddSecurityRequirement(new OpenApiSecurityRequirement
            {
                {
                    new OpenApiSecurityScheme
                    {
                        Reference = new OpenApiReference
                        {
                            Type = ReferenceType.SecurityScheme,
                            Id = "OAuth2"
                        }
                    },
                    new string[] { "api" }
                },
                {
                    new OpenApiSecurityScheme
                    {
                        Reference = new OpenApiReference
                        {
                            Type = ReferenceType.SecurityScheme,
                            Id = "Bearer"
                        }
                    },
                    Array.Empty<string>()
                }
            });
        });

        return services;
    }
}